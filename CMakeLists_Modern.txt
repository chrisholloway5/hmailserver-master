# hMailServer Next-Generation CMake Build System
# Modern C++26 with .NET 9 Integration
# Version: 2025.1.0

cmake_minimum_required(VERSION 3.30)

# Enable latest C++26 standard and modules
set(CMAKE_CXX_STANDARD 26)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_SCAN_FOR_MODULES ON)

# Project configuration with semantic versioning
project(hMailServerNext 
    VERSION 2025.1.0
    DESCRIPTION "Next-Generation Email Server with AI Integration"
    LANGUAGES CXX
)

# Modern build options
option(HMAILSERVER_BUILD_TESTS "Build unit tests" ON)
option(HMAILSERVER_BUILD_BENCHMARKS "Build performance benchmarks" ON)
option(HMAILSERVER_ENABLE_MODULES "Enable C++26 modules" ON)
option(HMAILSERVER_ENABLE_COROUTINES "Enable coroutine support" ON)
option(HMAILSERVER_ENABLE_AI_FEATURES "Enable AI/ML integration" ON)
option(HMAILSERVER_AZURE_INTEGRATION "Enable Azure cloud integration" OFF)

# Modern compiler requirements
if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++26 /experimental:module")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /permissive- /Zc:__cplusplus")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX /wd4996")
    
    # Profile-Guided Optimization
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL /LTCG")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
    endif()
endif()

# vcpkg integration for modern dependency management
find_package(vcpkg REQUIRED)

# Core dependencies with latest versions
find_package(fmt 11.0 REQUIRED)
find_package(spdlog 1.14 REQUIRED)
find_package(nlohmann_json 3.11 REQUIRED)
find_package(OpenSSL 3.2 REQUIRED)
find_package(Boost 1.85 REQUIRED COMPONENTS system filesystem thread)
find_package(Microsoft.GSL 4.1 REQUIRED)

# AI/ML dependencies (optional)
if(HMAILSERVER_ENABLE_AI_FEATURES)
    find_package(onnxruntime 1.19 REQUIRED)
    find_package(opencv 4.10 REQUIRED)
endif()

# Database drivers
find_package(unofficial-sqlite3 REQUIRED)
find_package(PostgreSQL REQUIRED)
find_package(unofficial-mysql-connector-cpp REQUIRED)

# Include directories
include_directories(
    ${CMAKE_SOURCE_DIR}/hmailserver/source
    ${CMAKE_SOURCE_DIR}/implementation/Phase1_Foundation/Engine
    ${CMAKE_SOURCE_DIR}/implementation/Phase1_Foundation/Security
    ${CMAKE_SOURCE_DIR}/implementation/Phase1_Foundation/AI
)

# Source groups for modern organization
file(GLOB_RECURSE CORE_SOURCES 
    "hmailserver/source/Server/Common/*.cpp"
    "hmailserver/source/Server/hMailServer/*.cpp"
)

file(GLOB_RECURSE PROTOCOL_SOURCES
    "hmailserver/source/Server/SMTP/*.cpp"
    "hmailserver/source/Server/POP3/*.cpp" 
    "hmailserver/source/Server/IMAP/*.cpp"
)

file(GLOB_RECURSE MODERN_SOURCES
    "implementation/Phase1_Foundation/**/*.cpp"
    "implementation/Phase2_Intelligence/**/*.cpp"
    "implementation/Phase3_Autonomous/**/*.cpp"
)

# Main executable target
add_executable(hMailServerNext
    ${CORE_SOURCES}
    ${PROTOCOL_SOURCES}
    ${MODERN_SOURCES}
)

# Modern target properties
set_target_properties(hMailServerNext PROPERTIES
    CXX_STANDARD 26
    CXX_STANDARD_REQUIRED ON
    WIN32_EXECUTABLE TRUE
    OUTPUT_NAME "hMailServerNext"
    VERSION ${PROJECT_VERSION}
)

# Link libraries with modern CMake targets
target_link_libraries(hMailServerNext PRIVATE
    fmt::fmt
    spdlog::spdlog
    nlohmann_json::nlohmann_json
    OpenSSL::SSL
    OpenSSL::Crypto
    Boost::system
    Boost::filesystem
    Boost::thread
    Microsoft.GSL::GSL
    unofficial::sqlite3::sqlite3
    PostgreSQL::PostgreSQL
    unofficial::mysql-connector-cpp
)

# AI/ML libraries (conditional)
if(HMAILSERVER_ENABLE_AI_FEATURES)
    target_link_libraries(hMailServerNext PRIVATE
        onnxruntime
        opencv_core
        opencv_imgproc
    )
    target_compile_definitions(hMailServerNext PRIVATE HMAILSERVER_AI_ENABLED)
endif()

# Compile definitions for feature flags
target_compile_definitions(hMailServerNext PRIVATE
    HMAILSERVER_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    HMAILSERVER_VERSION_MINOR=${PROJECT_VERSION_MINOR}
    HMAILSERVER_VERSION_PATCH=${PROJECT_VERSION_PATCH}
    UNICODE
    _UNICODE
    WIN32_LEAN_AND_MEAN
    NOMINMAX
)

# Modern testing framework
if(HMAILSERVER_BUILD_TESTS)
    enable_testing()
    find_package(Catch2 3.5 REQUIRED)
    
    add_executable(hMailServerTests
        tests/modern/test_main.cpp
        tests/modern/test_ai_engine.cpp
        tests/modern/test_security.cpp
        tests/modern/test_protocols.cpp
    )
    
    target_link_libraries(hMailServerTests PRIVATE
        Catch2::Catch2WithMain
        hMailServerNext
    )
    
    include(CTest)
    include(Catch)
    catch_discover_tests(hMailServerTests)
endif()

# Benchmarking with Google Benchmark
if(HMAILSERVER_BUILD_BENCHMARKS)
    find_package(benchmark REQUIRED)
    
    add_executable(hMailServerBenchmarks
        benchmarks/performance_suite.cpp
        benchmarks/ai_inference_bench.cpp
        benchmarks/protocol_bench.cpp
    )
    
    target_link_libraries(hMailServerBenchmarks PRIVATE
        benchmark::benchmark
        hMailServerNext
    )
endif()

# Installation configuration
install(TARGETS hMailServerNext
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

install(FILES 
    config/hMailServerNext.conf.in
    DESTINATION etc
    RENAME hMailServerNext.conf
)

# CPack configuration for MSI installer
set(CPACK_GENERATOR "WIX")
set(CPACK_WIX_UPGRADE_GUID "A1B2C3D4-E5F6-7890-ABCD-1234567890AB")
set(CPACK_PACKAGE_NAME "hMailServer Next-Generation")
set(CPACK_PACKAGE_VENDOR "hMailServer Development Team")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Next-Generation Email Server with AI")
set(CPACK_WIX_PRODUCT_ICON "${CMAKE_SOURCE_DIR}/resources/hmailserver.ico")

include(CPack)

# Development tools integration
add_custom_target(format
    COMMAND clang-format -i ${CORE_SOURCES} ${PROTOCOL_SOURCES} ${MODERN_SOURCES}
    COMMENT "Formatting source code"
)

add_custom_target(analyze
    COMMAND clang-tidy ${CORE_SOURCES} ${PROTOCOL_SOURCES} ${MODERN_SOURCES}
    COMMENT "Running static analysis"
)

# Documentation generation
find_package(Doxygen)
if(DOXYGEN_FOUND)
    add_custom_target(docs
        COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/docs/Doxyfile
        COMMENT "Generating API documentation"
    )
endif()

message(STATUS "hMailServer Next-Generation build configured")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "AI Features: ${HMAILSERVER_ENABLE_AI_FEATURES}")
message(STATUS "Azure Integration: ${HMAILSERVER_AZURE_INTEGRATION}")